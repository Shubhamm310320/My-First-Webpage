* {
  /* inheritance and global reset */
  margin: 0;
  padding: 0;
}

/* --------------------------------------------------------
 Page Sections
 ---------------------------------------------------------- */
body {
  /* inheritance and global properties */
  color: #444;
  font-family: sans-serif;

  border-top: 10px solid #1098ad;
  position: relative;
}

.container {
  width: 800px;
  margin: 0 auto;
}

.main-header {
  background-color: #f7f7f7;
  padding: 20px 40px;
  margin-bottom: 60px;
}

nav {
  /* inheritance */
  font-size: 18px;
  text-align: center;
  text-decoration: none;
}

article {
  margin-bottom: 60px;
}

.post-header {
  margin-bottom: 40px;
}

aside {
  background-color: #f7f7f7;
  border-top: 5px solid #1098ad;
  border-bottom: 5px solid #1098ad;

  /* padding-top: 50px;
  padding-bottom: 50px; */
  padding: 50px 0;
}

/* --------------------------------------------------------
 Smaller Elements Section 
 ---------------------------------------------------------- */

h1,
h2,
h3 {
  color: #1098ad;
}

h1 {
  font-size: 26px;
  text-transform: uppercase;
  font-style: italic;
  text-align: center;
  margin-bottom: 10px;
}

h2 {
  position: relative;
  font-size: 40px;
  margin-bottom: 30px;
}

h3 {
  font-size: 30px;
  margin-bottom: 20px;
  margin-top: 40px;
}

h4 {
  font-size: 20px;
  text-transform: uppercase;
  text-align: center;
}

p {
  font-size: 22px;
  line-height: 1.5;
  margin-bottom: 15px;
}

ul,
ol {
  margin-left: 50px;
  margin-bottom: 20px;
}

li {
  font-size: 20px;
  margin-bottom: 10px;
}

li:first-child {
  font-weight: bold;
}

li:last-child {
  margin-bottom: 0;
  font-style: italic;
}

li:nth-child(even) {
  background-color: #ccc;
}

/* misconception: this won't work */
article p:first-child {
  color: red;
}

/* Styling Links */
a:link {
  color: #1098ad;
  text-decoration: none;
}

a:visited {
  color: #1098ad;
}

a:hover {
  color: orangered;
  font-weight: bold;
  text-decoration: underline orangered;
}

a:active {
  background-color: #444;
  font-style: italic;
}

.post-img {
  width: 100%;
  height: auto;
}

#author {
  font-style: italic;
  font-size: 18px;
}

#copyright {
  font-size: 16px;
}

.related-author {
  font-size: 18px;
  font-weight: bold;
}

.related {
  list-style: none;
}

nav a:link {
  /* background-color: orangered;
  margin: 20px;
  padding: 20px;

  display: block; */

  margin-right: 30px;
  margin-top: 10px;
  display: inline-block;
}

nav a:link:last-child {
  margin-right: 0;
}

h2::after {
  content: "TOP";
  background-color: #ffe70e;
  color: #444;
  font-size: 16px;
  font-weight: bold;
  display: inline-block;
  padding: 5px 10px;
  position: absolute;
  top: -10px;
  right: -25px;
}

h1::first-letter {
  font-style: normal;
  margin-right: 5px;
}

/* 
footer p {
  font-size: 16px;
} */

button {
  font-size: 22px;
  padding: 20px;
  cursor: pointer;

  position: absolute;
  /* top: 50px;
  left: 50px; */
  bottom: 50px;
  right: 50px;
}
/*
################################################# 
SMALL INFORMATIONS
#################################################
*/

/* 
------------------------------------------------------
STYLING TEXT
------------------------------------------------------
1. We do not style the ul or the ol element instead we style the li elements

2. default font size is 16 px

3. The elements that were inside of the paragraphs also got the same styles. This is because of a mechanism called inheritance 

4. text-align centers the element inside its parent element

------------------------------------------------------
COMBINING SELECTORS
------------------------------------------------------
1. It is not good to repeat same code such as font-family per se.

2. We can create a list of selectors by , so that we need to change similar properties in just one place

3. Descendant selector selects all the child elements inside of a element. We can also nest these.

4. These are not very robust solutions as if the code changes in future there might be lots of bugs arising.

------------------------------------------------------
CLASS and ID SELECTORS
------------------------------------------------------
1. # is the ID selector 

2. Ctrl + / is for comments

3. . is the class selector

4. big difference between both is that id is non repeatable but classes can be used at multiple elements

5. There is a convention that if we have multiple word class names we write it using - or _

6. new property font-weight.

7. our paragraphs are selected 3 times and all the styles are applied.

8. removing bullet points by list-style property

9. In the real world we always use classes and not id's

------------------------------------------------------
WORKING WITH COLORS
------------------------------------------------------
There are many ways to represent colors in computer.
1. The traditional model is the RGB model, where colors can be represented by a combination of red,blue,green. each of 3 base colors can take a value from 0 to 255, which leads to 16.8 million different colors.

2. In CSS we have two ways to define colors using rgb model
  a. rgb/rgba notation  rgba(0, 0 , 0, 0.3)
  b. hexadecimal notation #fff

3. If the three pairs are similar it is indication of a grey color.

4. background-color, color and border which is a shorthand property for border-top, border-bottom,border-left, border-right.

------------------------------------------------------
PSEUDO-CLASSES
------------------------------------------------------
1. For example lets assume we want to style only the first element of the list. We can select that by usiing pseudo classes - li:first-child{}

2. li:last-child{} for last child

3. li:nth-child(odd,even,2,3etc.){} for nth child

------------------------------------------------------
STYLING HYPERLINKS
------------------------------------------------------
1. we should document our code using comments

2. styling links directly is a bad practice.

3. Instead style hyperlinks with pseudo classes
  a. a:link{} for anchor elements that have href attribute
  b. a:visited{} for links that have been clicked before. In practice we never do this
  c. we keep both of these together
  d. a:hover{} for links when we hover them
  e. a:active{} for links when we have clicked them 

4. Another common thing is to remove underline by text-decoration to none. This is also a shorthand property

------------------------------------------------------
CSS box model
------------------------------------------------------
1. It defines how elements are displayed and sized on a webpage.
2. Each element can be seen as a rectangular box with a content, border and space inside and outside.
3. height and width - content
4. border - inside
5. padding - inside - between content and border
6. margin - outside - space between elements on our page - margins are overlapping that means the margin that is greater will apply and not added. we should use and stick to margin bottom for spacing between elements.
7. these are optional properties
8. by default the final width and height are calculated by keeping padding and borders into account.

------------------------------------------------------
Types of Boxes in Box Model
------------------------------------------------------

There are 3 types - inline and block level boxes
1. Block level elements
    a. Elements are formatted visually as blocks 
    b. occupy 100% of parent element's width
    c. stacked vertically by default 
    d. Follow normal box-model behaviour 

    default elements: body, main, header, footer, section, nav, aside, div, h1-h6, p, ul, ol, li, etc.
    with CSS: display: block - inline to block

2. Inline Elements
    a. Cause no line-break before or after the element 
    b. occupy only the space necessary for its content
    c. paddings and margins apply only horizontally (left and right) 
    d. heights and widths do not apply 

    default elements: a, img, strong, em, button, etc.
    with CSS: display: inline - block to inline

3. Inline-Block elements
    a. Cause no line-break before or after the element 
    b. occupy only the space necessary for its content
    c. Follow normal box-model behaviour
    d. images are inline-block elements

------------------------------------------------------
Positioning Modes
------------------------------------------------------
Normal flow
  - default positioning
  - element is in flow
  - elements are simply laid out according to their order in the HTML code
  - position: relative
Absolute positioning
  - Element is removed from the normal flow
  - No impact on surrounding elements, might overlap them
  - we use left,right,top,bottom to offset the element from its relatively positioned container
  - position: absolute

Created a like button for example
default the position would be relative to the viewport but if we set some element position to relative then it will be relative to that.
it needs to be somewhere inside the element that we make relative not a sibling or outside.

------------------------------------------------------
Pseudo Elements
------------------------------------------------------
The elements which are not HTML elements but even then we can select and style them in CSS using pseudo elements. for example the first letter of a para or text, or the first line of a para or text.

used by ::

Adjacent sibling selector(+) - h3 + p means only the paras after an h3 that means a adjacent element after the h3 in the same parent element that means sibling. hence adjacent sibling.

The most useful are ::after and ::before used to create a pseudo element that will automatically be the very first child of the selected element and for small cosmetic styles.
*/

/*
################################################# 
LAYOUTS: CSS Grid
#################################################
*/
.container {
  width: 1200px;
  display: grid;
  grid-template-columns: 825px 300px;
  gap: 80px;
  align-items: start;
}

.main-header {
  display: flex;
  justify-content: space-between;
  grid-column: 1/-1;
}
